#include <stdio.h>
#include <stdlib.h>

#define DEKO_MAKS_ELEMENTU_KIEKIS 5
#define DEKU_MAKS_KIEKIS 3

static int dekuKiekisAtmintyje = 0;

char klaidu_zinutes[5][256] = {
    "Viršijamas deko limitas\n",
    "Deke nėra elementų\n",
    "Viršijamas dekų kiekio limitas\n",
    "Netinkama pozicija deke\n",
    "Dekas nesukurtas\n"
    };

void mesti_klaida(int kodas)
{
    printf("%s", klaidu_zinutes[kodas - 1]);
    exit(kodas);
}

typedef struct
{
    int *duomenys;
    int priekis, galas, dydis, talpa;
} Dekas;

Dekas *sukurti_deka()
{
    if (dekuKiekisAtmintyje == DEKU_MAKS_KIEKIS)
    {
        mesti_klaida(3);
    }
    dekuKiekisAtmintyje++;
    Dekas *dekas = (Dekas *)malloc(sizeof(Dekas));
    dekas->talpa = DEKO_MAKS_ELEMENTU_KIEKIS;
    dekas->duomenys = (int *)malloc(dekas->talpa * sizeof(int));
    dekas->priekis = dekas->galas = dekas->dydis = 0;
    return dekas;
}

void push_priekis(Dekas *dekas, int verte)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == dekas->talpa)
    {
        mesti_klaida(1);
    }
    dekas->priekis = (dekas->priekis - 1 + dekas->talpa) % dekas->talpa;
    dekas->duomenys[dekas->priekis] = verte;
    dekas->dydis++;
}

void push_galas(Dekas *dekas, int verte)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == dekas->talpa)
    {
        mesti_klaida(1);
    }
    dekas->duomenys[dekas->galas] = verte;
    dekas->galas = (dekas->galas + 1) % dekas->talpa;
    dekas->dydis++;
}

int pop_priekis(Dekas *dekas)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == 0)
    {
        mesti_klaida(2);
    }
    int verte = dekas->duomenys[dekas->priekis];
    dekas->priekis = (dekas->priekis + 1) % dekas->talpa;
    dekas->dydis--;
    return verte;
}

int pop_galas(Dekas *dekas)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == 0)
    {
        mesti_klaida(2);
    }
    dekas->galas = (dekas->galas - 1 + dekas->talpa) % dekas->talpa;
    int verte = dekas->duomenys[dekas->galas];
    dekas->dydis--;
    return verte;
}

int top(Dekas *dekas)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == 0)
    {
        mesti_klaida(2);
    }
    return dekas->duomenys[dekas->priekis];
}

int bottom(Dekas *dekas)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == 0)
    {
        mesti_klaida(2);
    }
    return dekas->galas;
}

void ideti(Dekas *dekas, int index, int verte)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (index < 0 || index > dekas->dydis)
    {
        mesti_klaida(4);
    }
    if (dekas->dydis == dekas->talpa)
    {
        mesti_klaida(1);
    }
    for (int i = dekas->dydis; i > index; i--)
    {
        dekas->duomenys[(dekas->priekis + i) % dekas->talpa] = dekas->duomenys[(dekas->priekis + i - 1) % dekas->talpa];
    }
    dekas->duomenys[(dekas->priekis + index) % dekas->talpa] = verte;
    dekas->dydis++;
}

void print_dekas(Dekas *dekas)
{
    if(dekas == NULL)
    {
        mesti_klaida(5);
    }
    if (dekas->dydis == 0)
    {
        mesti_klaida(2);
    }
    printf("Priekis ");
    for (int i = 0; i < dekas->dydis; i++)
    {
        printf("%d -> ", dekas->duomenys[(dekas->priekis + i) % dekas->talpa]);
    }
    printf("Galas\n");
}

void atlaisvinti(Dekas *dekas)
{
    if(dekuKiekisAtmintyje == 0)
    {
        mesti_klaida(5);
    }
    dekuKiekisAtmintyje--;
    free(dekas->duomenys);
    free(dekas);
}

int main()
{
    int kilpa = 0;
    Dekas *dekas = NULL;

    while(kilpa == 0)
    {
        int choice = 0;
        printf("Meniu:\n");
        printf("1 - Sukurti deką\n");
        printf("2 - Įdėti elementą\n");
        printf("3 - Push iš priekio\n");
        printf("4 - Push iš galo\n");
        printf("5 - Pop iš priekio\n");
        printf("6 - Pop iš galo\n");
        printf("7 - Top\n");
        printf("8 - Bottom\n");
        printf("9 - Atspausdinti deką\n");
        printf("10 - Sunaikinti deką\n");
        printf("11 - išeiti iš programos\n");
        scanf("%d", &choice);

        switch (choice)
        {
            case 1:
            {
            dekas = sukurti_deka();
            break;
            }
            case 2:
            {
            int v = 0;
            int i = 0;
            printf("Pozicija: ");
            scanf("%d", &i);
            printf("Reikšmė: ");
            scanf("%d", &v);
            ideti(dekas, i, v);
            break;
            }
            case 3:
            {
            int v = 0;
            printf("Reikšmė: ");
            scanf("%d", &v);
            push_priekis(dekas, v);
            break;
            }
            case 4:
            {
            int v = 0;
            printf("Reikšmė: ");
            scanf("%d", &v);
            push_galas(dekas, v);
            break;
            }
            case 5:
            {
            printf("Pop priekis: %d\n", pop_priekis(dekas));
            break;
            }
            case 6:
            {
            printf("Pop galas: %d\n", pop_galas(dekas));
            break;
            }
            case 7:
            {
            printf("Top: %d\n", top(dekas));
            break;
            }
            case 8:
            {
            printf("Bottom: %d\n", bottom(dekas));
            break;
            }
            case 9:
            {
            print_dekas(dekas);
            break;
            }
            case 10:
            {
            atlaisvinti(dekas);
            break;
            }
            case 11:
            {
            kilpa = 1;
            break;
            }
        }
    }
    return 0;
}
