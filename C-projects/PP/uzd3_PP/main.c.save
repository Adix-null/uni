// LSP: 2413914
// el. pastas: adomas.bieliunas@mifstud.vu.lt
// 3 uzduotis, 4 variantas

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <limits.h>
#include <float.h>
#include <stdbool.h>
#include <string.h>

#define ROW_SIZE 256
#define SEPARATOR ' '

//{

typedef struct
{
    char (*arr)[ROW_SIZE];
    int size;
} Stack;

void initStack(Stack *stack)
{
    stack->arr = (char(*)[256])calloc(stack->size, 256);
    memset((*stack->arr), 0, stack->size);
}

void printStack(Stack *stack)
{
    for(int i = 0; i < stack->size; i++)
    {
        printf("%s ", (*(stack->arr))[i]);
    }
    printf("\n");
}

int getStackSize(Stack *stack)
{
    return stack->size;
}

void push(Stack *stack, char value[ROW_SIZE])
{
    stack->arr = realloc(stack->arr, (getStackSize(stack) + 1) * 256);
    (*stack->arr)[getStackSize(stack)] = value;
    ++(stack->size);
}

int top(Stack *stack)
{
    return stack->size == 0 ? 0 : (*stack->arr)[getStackSize(stack) - 1];
}

int pop(Stack *stack)
{
    int tmp = top(stack);
    stack->arr = realloc(stack->arr, (getStackSize(stack) - 1) * sizeof((*stack->arr)[0]));
    --(stack->size);
    return tmp;
}

void destroyStack(Stack *stack)
{
    memset((*stack->arr), 0, stack->size);
    free(*stack->arr);
    stack->size = 0;
    stack = NULL;
}
//}

char* join_words(char line[ROW_SIZE])
{
    char* row;
    row = (char*)calloc(ROW_SIZE, sizeof(row[0]));
    memset(row, 0, ROW_SIZE);
    int cn = 0;

    for(int i = 0; i < ROW_SIZE - 2; i++, cn++)
    {
        row[cn] = line[i];
        if(line[i] == line[i + 2] && line[i + 1] == SEPARATOR)
        {
            i += 2;
        }
    }
    row[cn] = line[ROW_SIZE - 2];
    row[cn + 1] = line[ROW_SIZE - 2];
    return row;
}

int validate_input(char *name, int *input, int lower_bound, int upper_bound)
{
    char extra_input;
    printf("Iveskite %s: \n", name);
    int result = scanf("%d%c", input, &extra_input);

    if (result != 2 || (extra_input != '\n' && extra_input != ' '))
    {
        printf("Neteisinga ivestis\n");
        return 1;
    }
    else if (*input < lower_bound || *input > upper_bound)
    {
        printf("Netinkamas skaicius\n");
        return 2;
    }
    return 0;
}

int main()
{
    Stack s = {0, 0};
    initStack(&s);

    FILE *file;
    char* inp_file_name;
    printf("Duomenu failo pavadinimas: ");
    //scanf("%s", inp_file_name);
    file = fopen("inp.txt", "r");

    if(file == NULL)
    {
        printf("Nepavyko atidaryti failo.\n");
        return 1;
    }


    char line[ROW_SIZE];
    while (fgets(line, ROW_SIZE, file) != NULL)
    {
        printf("%s", line);
        //printf("t\n");
        push(&s, line);
        printf("t\n");
        printStack(&s);
    }


    // Close the file
    fclose(file);
    return 0;
}
